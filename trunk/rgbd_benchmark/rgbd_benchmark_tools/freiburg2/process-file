#!/bin/bash

# enable strict error checking
set -u
set -e

# get arguments
if [ $# -ne 2 ]
then
  echo "Usage: `basename $0` <input.bag> </dir/to/output/folder>"
  exit 1
fi

original_bag=$1
output_folder=$2
mkdir -p $output_folder

basename=$(basename $original_bag .bag)
f=$output_folder/$basename

# create log file
LOGFILE=$f-stderr-stdout.txt
echo "Creating log file '$LOGFILE'"
rm -f $LOGFILE

TMPFILE=$(mktemp)

function exec_echo()  
{
	echo $@
    echo "================================================================================" >> $LOGFILE
    echo >> $LOGFILE   
	echo $@ >> $LOGFILE
}

exec_echo "Input File: '$original_bag'"
exec_echo "Output Folder: '$output_folder'"
exec_echo "Output Prefix: '$f'"

function exec_cmd()  
{
	echo -n "    running '$@'" 
	echo -n "    running '$@'" >> $LOGFILE
	START=$(date +%s)
	rm -f $TMPFILE
	eval $@ 1>>$TMPFILE 2>&1 || {
	      END=$(date +%s); 
          DIFF=$(( $END - $START )); 
		  echo -e " (FAIL after ${DIFF}s)\n\n================================================================================"; 
		  cat $TMPFILE;  
		  echo -e "================================================================================\nExiting after error..";
		  kill $$
		} | tee -a $LOGFILE
	END=$(date +%s)
    DIFF=$(( $END - $START ))
    if test $DIFF -gt 0; then
    	echo " (SUCCESS after ${DIFF}s)" | tee -a $LOGFILE
    else 
	    echo " (SUCCESS)" | tee -a $LOGFILE
    fi

	cat $TMPFILE | grep -v ^t= | while read line; do
	    echo "    |  $line" >> $LOGFILE
	done
	echo "    |________________________________________________________________________________" >> $LOGFILE
	echo "" >> $LOGFILE
}

# cd to the tools folder
exec_cmd date
exec_cmd cd $(rospack find rgbd_benchmark_tools)
exec_cmd svn info

exec_echo "Copying file to working dir"
exec_cmd cp $original_bag $f.bag
exec_cmd cp ${original_bag%.bag}-info.txt $f-info.txt
exec_cmd rosbag info $f.bag

# synchronize file
exec_echo "Synchronizing data"
while test -f /tmp/sync.lock; do sleep 5; done
touch /tmp/sync.lock
exec_cmd scripts/synchronize.py $f.bag --delay 0.02
rm -r /tmp/sync.lock

# add groundtruth tf
echo "Adding groundtruth and calibration"
exec_cmd scripts/add_groundtruth.py --prop freiburg2/kinect.prop --calibration freiburg2/calibration.bag $f-synced.bag

exec_echo "Extracting statistics"
exec_cmd scripts/extract_statistics.py $f-groundtruth.txt
exec_cmd mv $f-groundtruth-statistics.txt $f-statistics.txt

exec_echo "..Downsampling to 2 Hz and adding point clouds for visual validation"
exec_cmd scripts/add_points.py  --nth 15 $f-synced-gt.bag $f-2hz-with-pointclouds.bag

exec_echo "..Renaming files"
exec_cmd mv $f.bag $f-original.bag
exec_cmd mv $f-synced-gt.bag $f.bag

exec_echo "Extracting groundtruth"
exec_cmd scripts/extract_groundtruth.py $f.bag

# add export images 
exec_echo "Extracting images"
exec_cmd scripts/extract_data.py $f.bag
exec_cmd cp $(find $f-rgb/*.png | head -n 1) $f-rgb.png
exec_cmd mencoder mf://$f-rgb/*.png -mf fps=30:type=png -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=2400 -nosound -quiet -o $f-rgb.avi;
exec_cmd cp $(find $f-depth8/*.png | head -n 1) $f-depth.png
exec_cmd mencoder mf://$f-depth8/*.png -mf fps=30:type=png -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=2400 -nosound -quiet -o $f-depth.avi;
		
exec_echo "..Creating archive" 
exec_cmd cd $output_folder; tar cvzf $basename.tgz $basename-rgb $basename-depth $basename-rgb.txt $basename-depth.txt $basename-groundtruth.txt $basename-accelerometer.txt 
exec_cmd cd $(rospack find rgbd_benchmark_tools)
		
exec_echo "..Cleaning up"
exec_cmd rm -rf $f-depth8
exec_cmd rm -rf $f-rgb
exec_cmd rm -rf $f-depth

exec_echo "Cleaning up"
exec_cmd rm -rf $f-synced.bag

